package mods.flammpfeil.slashblade.client.renderer.model;

import com.mojang.blaze3d.platform.GlStateManager;
import mods.flammpfeil.slashblade.ability.ProjectileBarrier;
import mods.flammpfeil.slashblade.capability.slashblade.ISlashBladeState;
import mods.flammpfeil.slashblade.client.renderer.CarryType;
import mods.flammpfeil.slashblade.client.renderer.model.obj.WavefrontObject;
import mods.flammpfeil.slashblade.client.util.LightSetup;
import mods.flammpfeil.slashblade.client.model.BladeModelManager;
import mods.flammpfeil.slashblade.client.model.obj.Face;
import mods.flammpfeil.slashblade.client.model.obj.WavefrontObject;
import mods.flammpfeil.slashblade.config.SlashBladeConfig;
import mods.flammpfeil.slashblade.item.ItemSlashBlade;
import mods.flammpfeil.slashblade.util.ReflectionAccessHelper;
import mods.flammpfeil.slashblade.util.ResourceLocationRaw;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.entity.BipedRenderer;
import net.minecraft.client.renderer.entity.IEntityRenderer;
import net.minecraft.client.renderer.entity.RenderLivingBase;
import net.minecraft.client.renderer.entity.layers.LayerRenderer;
import net.minecraft.client.renderer.entity.model.EntityModel;
import net.minecraft.client.renderer.entity.model.IHasArm;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.CompoundNBT;
import net.minecraft.util.EnumHand;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.Util;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.client.MinecraftForgeClient;
import net.minecraftforge.common.capabilities.Capability;
import net.minecraftforge.common.capabilities.CapabilityInject;
import net.minecraftforge.common.util.LazyOptional;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL14;

import java.awt.*;
import java.util.EnumSet;

/**
 * Created by Furia on 2016/02/06.
 */
public class LayerSlashBlade<T extends LivingEntity, M extends EntityModel<T>> extends LayerRenderer<T, M> {

    private static final ResourceLocation armoredCreeperTextures = new ResourceLocation("textures/entity/creeper/creeper_armor.png");
    private static final ResourceLocation RES_ITEM_GLINT = new ResourceLocation("textures/misc/enchanted_item_glint.png");


    static public WavefrontObject trailModel = null;

    static public ResourceLocation modelLocation = new ResourceLocation("flammpfeil.slashblade","model/util/trail.obj");
    static public ResourceLocation textureLocation = new ResourceLocation("flammpfeil.slashblade","model/util/trail.png");

    static private boolean enabledOffhandRendering = true;

    @CapabilityInject(ISlashBladeState.class)
    public static Capability<ISlashBladeState> BLADESTATE = null;


    static public void enableOffhandRendering(){
        enabledOffhandRendering = true;
    }
    static public void disableOffhandRendering(){
        enabledOffhandRendering = false;
    }

    public LayerSlashBlade(IEntityRenderer<T, M> entityRendererIn) {
        super(entityRendererIn);
    }

    float lerp(float start, float end, float percent){
        return (start + percent*(end - start));
    }

    float lerpDegrees(float start, float end, float percent){
        float diff = end - start;

        while (diff < -180.0F)
            diff += 360.0F;

        while (diff >= 180.0F)
            diff -= 360.0F;

        return start + percent * diff;
    }


    @Override
    public void render(LivingEntity LivingEntityIn, float limbSwing, float limbSwingAmount, float partialTicks, float ticksExisted, float yawDiff, float rotationPitch, float scalef) {
        if(trailModel == null){
            trailModel = new WavefrontObject(modelLocation);
        }

        GlStateManager.pushMatrix();

        GlStateManager.scalef(1.0F, 1.0F, 1.0F);
        render(LivingEntityIn, partialTicks);

        GlStateManager.popMatrix();
    }

    RingState ringStates = new RingState(){
        @Override
        public void transform() {
            super.transform();

            GlStateManager.rotatef(90, 0, 0, 1);
            GlStateManager.translatef(5, 50, 0);

            float scalef = 0.25f;
            GlStateManager.scalef(scalef,scalef,scalef);

            long ticks = Minecraft.getInstance().world == null ? 0 : Minecraft.getInstance().world.getGameTime();
            float partialTicks = Minecraft.getInstance().getRenderPartialTicks();

            float rotatef = (float)((ticks % 1500 + partialTicks ) / 1500.0d * 180.0d);

            GlStateManager.rotatef(rotatef, 0, 1, 0);

        }
    };

    public static class RingState{

        static public WavefrontObject ringModel = null;
        public static final ResourceLocation ringModelLoc = new ResourceLocation("flammpfeil.slashblade","model/util/ring.obj");
        public static final ResourceLocation ringTexLoc = new ResourceLocation("flammpfeil.slashblade","model/util/ring.png");

        public void transform(){

        }

        public void renderRing(){
            //todo config
            //if(!SlashBladeConfig.CLIENT.floatingVisualEffectEnabled.get()) return;

            if(ringModel == null){
                ringModel = new WavefrontObject(ringModelLoc);
            }

            GlStateManager.pushMatrix();
            GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);

            transform();

            Minecraft.getInstance().getTextureManager().bindTexture(ringTexLoc);

            GL11.glAlphaFunc(GL11.GL_GEQUAL, 0.01f);

            GlStateManager.disableLighting();
            GL11.glEnable(GL11.GL_BLEND);
            GlStateManager.blendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

            ringModel.renderAll();

            GlStateManager.enableLighting();
            GlStateManager.blendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);


            GL11.glPopAttrib();
            GlStateManager.popMatrix();
        }
    }

    @Override
    public boolean shouldCombineTextures() {
        return true;
    }

    void renderBack(ItemStack item, LivingEntity player){
        renderBack(item, player, false, false);
    }

    void renderBack(ItemStack item, LivingEntity player, boolean forceNinja, boolean noBlade) {
        ItemSlashBlade iSlashBlade = ((ItemSlashBlade) item.getItem());

        LazyOptional<ISlashBladeState> state = item.getCapability(BLADESTATE);

        if(!state.isPresent()) return;

        state.ifPresent(s->{

            WavefrontObject model = BladeModelManager.getInstance().getModel(s.getModel());

            EnumSet<ItemSlashBlade.SwordType> swordType = s.getSwordType(item);

            boolean isNoScabbard = swordType.contains(ItemSlashBlade.SwordType.NoScabbard);


            boolean isBroken = swordType.contains(ItemSlashBlade.SwordType.Broken);

            CarryType renderType = s.getCarryType();

            if (isNoScabbard)
                renderType = CarryType.NONE;

            if(forceNinja)
                renderType = CarryType.NINJA;

            if (renderType == CarryType.NONE) {
                return;
            }

            Vec3d adjust = s.getAdjust();
            adjust = adjust.mul(0.1,0.1,0.1);

            if (renderType != CarryType.DEFAULT) {
                adjust.mul(0,1,0);
            }

            String renderTarget;

            GL11.glPushMatrix();
            GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);
            {

                if (this.getEntityModel().isChild)
                {
                    float f = 0.5F;
                    GlStateManager.translatef(0.0F, 0.625F, 0.0F);
                    GlStateManager.rotatef(-20.0F, -1.0F, 0.0F, 0.0F);
                    GlStateManager.scalef(f, f, f);
                }


                //((ModelBiped)render.getMainModel()).bipedBody.postRender(0.0625F);
                //GlStateManager.translatef(-0.0625F, 0.4375F, 0.0625F);

                if (player.isSneaking())
                {
                    GlStateManager.translatef(0.0F, 0.203125F, 0.0F);
                }
            }

            {
                GlStateManager.shadeModel(GL11.GL_SMOOTH);
                GL11.glColor3f(1.0F, 1.0F, 1.0F);

                //�̊i�␳ config���
                GlStateManager.translated(adjust.x,adjust.y,adjust.z);

                switch (renderType) {
                    case KATANA: //pso2
                        //���ʒu��
                        GlStateManager.translatef(0, 0.5f, 0.25f);


                    {
                        //�S�̃X�P�[���␳
                        float scalef = (float) (0.075f);
                        GlStateManager.scalef(scalef, scalef, scalef);
                    }
                    GlStateManager.rotatef(83.0f, 0, 0, 1);

                    GlStateManager.translatef(0, -12.5f, 0);

                    break;

                    case NINJA: //ninja
                        //���ʒu��
                        GlStateManager.translatef(0, 0.4f, 0.25f);


                    {
                        //�S�̃X�P�[���␳
                        float scalef = (float) (0.075f);
                        GlStateManager.scalef(scalef, scalef, scalef);
                    }
    /*
                        //�������
                        GlStateManager.rotatef(90.0f, 1, 0, 0);
                        //�������
    */
                    GlStateManager.rotatef(-30.0f, 0, 0, 1);

                    GlStateManager.rotatef(-180.0f, 0, 1.0f, 0);

                    GlStateManager.translatef(0, -12.5f, 0);

                    break;


                    default:
                        //���ʒu��
                        GlStateManager.translatef(0.25f, 0.4f, -0.5f);


                    {
                        //�S�̃X�P�[���␳
                        float scalef = (float) (0.075f);
                        GlStateManager.scalef(scalef, scalef, scalef);
                    }

                    //�������
                    GlStateManager.rotatef(60.0f, 1, 0, 0);

                    //����O��
                    GlStateManager.rotatef(-20.0f, 0, 0, 1);

                    //�n�����Ɍ�����i��������
                    GlStateManager.rotatef(90.0f, 0, 1.0f, 0);
                    break;
                }


                //-----------------------------------------------------------------------------------------------------------------------
                GL11.glPushMatrix();
                if(!noBlade){
                    if (isBroken)
                        renderTarget = "blade_damaged";
                    else
                        renderTarget = "blade";


                    float scalefLocal = 0.095f;
                    GlStateManager.scalef(scalefLocal, scalefLocal, scalefLocal);
                    GlStateManager.rotatef(-90.0f, 0, 0, 1);
                    this.render.bindTexture(resourceTexture);

                    GlStateManager.texParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
                    GlStateManager.texParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
                    GL11.glAlphaFunc(GL11.GL_GEQUAL, 0.05f);

                    model.renderPart(renderTarget);

                    GlStateManager.disableLighting();
                    GL11.glEnable(GL11.GL_BLEND);
                    OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

                    try(LightSetup ls = LightSetup.setup()){
                        model.renderPart(renderTarget + "_luminous");

                    }

                    GlStateManager.enableLighting();
                    OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);

                    ringStates.renderRing();

                    if (item.hasEffect()) {

                        GL11.glDepthFunc(GL11.GL_EQUAL);
                        GlStateManager.disableLighting();
                        this.render.bindTexture(RES_ITEM_GLINT);
                        GL11.glEnable(GL11.GL_BLEND);
                        OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_COLOR, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);


                        Face.setColor(0xFF8040CC);

                        GL11.glMatrixMode(GL11.GL_TEXTURE);
                        GL11.glPushMatrix();
                        float f8 = 0.125F;
                        GlStateManager.scalef(f8, f8, f8);
                        float f9 = (float) (Util.milliTime() % 3000L) / 3000.0F * 8.0F;
                        GlStateManager.translatef(f9, 0.0F, 0.0F);
                        GlStateManager.rotatef(-50.0F, 0.0F, 0.0F, 1.0F);
                        model.renderPart(renderTarget);
                        GL11.glPopMatrix();
                        GL11.glPushMatrix();
                        GlStateManager.scalef(f8, f8, f8);
                        f9 = (float) (Util.milliTime() % 4873L) / 4873.0F * 8.0F;
                        GlStateManager.translatef(-f9, 0.0F, 0.0F);
                        GlStateManager.rotatef(10.0F, 0.0F, 0.0F, 1.0F);
                        model.renderPart(renderTarget);
                        GL11.glPopMatrix();
                        GL11.glMatrixMode(GL11.GL_MODELVIEW);

                        Face.resetColor();

                        OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);
                        GlStateManager.enableLighting();
                        GL11.glDepthFunc(GL11.GL_LEQUAL);
                    }

                }
                GL11.glPopMatrix();


                if (!isNoScabbard) {

                    GL11.glPushMatrix();

                    float scalefLocal = 0.095f;
                    GlStateManager.scalef(scalefLocal, scalefLocal, scalefLocal);
                    GlStateManager.rotatef(-90.0f, 0, 0, 1);
                    this.render.bindTexture(resourceTexture);

                    GlStateManager.texParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
                    GlStateManager.texParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
                    GL11.glAlphaFunc(GL11.GL_GEQUAL, 0.05f);

                    renderTarget = "sheath";
                    model.renderPart(renderTarget);

                    GlStateManager.disableLighting();
                    GL11.glEnable(GL11.GL_BLEND);
                    OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

                    try(LightSetup ls = LightSetup.setup()){
                        model.renderPart(renderTarget + "_luminous");
                    }

                    GlStateManager.enableLighting();
                    OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);

                    if (item.hasEffect()) {
                        GL11.glDepthFunc(GL11.GL_EQUAL);
                        GlStateManager.disableLighting();
                        this.render.bindTexture(RES_ITEM_GLINT);
                        GL11.glEnable(GL11.GL_BLEND);
                        OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_COLOR, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

                        Face.setColor(0xFF8040CC);

                        GL11.glMatrixMode(GL11.GL_TEXTURE);
                        GL11.glPushMatrix();
                        float f8 = 0.125F;
                        GlStateManager.scalef(f8, f8, f8);
                        float f9 = (float) (Util.milliTime() % 3000L) / 3000.0F * 8.0F;
                        GlStateManager.translatef(f9, 0.0F, 0.0F);
                        GlStateManager.rotatef(-50.0F, 0.0F, 0.0F, 1.0F);
                        model.renderPart(renderTarget);
                        GL11.glPopMatrix();
                        GL11.glPushMatrix();
                        GlStateManager.scalef(f8, f8, f8);
                        f9 = (float) (Util.milliTime() % 4873L) / 4873.0F * 8.0F;
                        GlStateManager.translatef(-f9, 0.0F, 0.0F);
                        GlStateManager.rotatef(10.0F, 0.0F, 0.0F, 1.0F);
                        model.renderPart(renderTarget);
                        GL11.glPopMatrix();
                        GL11.glMatrixMode(GL11.GL_MODELVIEW);

                        Face.resetColor();

                        OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);
                        GlStateManager.enableLighting();
                        GL11.glDepthFunc(GL11.GL_LEQUAL);
                    }

                    GL11.glPopMatrix();
                }
                GlStateManager.shadeModel(GL11.GL_FLAT);
            }
            GL11.glPopAttrib();
            GL11.glPopMatrix();
        });

    }

    void render(LivingEntity entity,float partialTicks)
    {
        boolean doAdjust = true;

        if(entity == null)
            return;




        ItemStack stack = entity.getHeldItem(EnumHand.MAIN_HAND);
        ItemStack offhand = entity.getHeldItem(EnumHand.OFF_HAND);

        if(stack.isEmpty() || !(stack.getItem() instanceof ItemSlashBlade)){
            if(entity instanceof EntityPlayer){
                ItemStack firstItem = ((EntityPlayer)entity).inventory.getStackInSlot(0);
                if(doAdjust && !firstItem.isEmpty() && (firstItem.getItem() instanceof ItemSlashBlade)){
                    renderBack(firstItem,(EntityPlayer)entity);
                }
            }
            return;
        }

        LazyOptional<ISlashBladeState> state = stack.getCapability(BLADESTATE);

        if(!state.isPresent()) return;

        state.ifPresent(s -> {
            WavefrontObject model = BladeModelManager.getInstance().getModel(s.getModel());

            EnumSet<ItemSlashBlade.SwordType> swordType = itemBlade.getSwordType(stack);

            if(swordType.contains(ItemSlashBlade.SwordType.NoScabbard)){
                //todo :LayerHeldItem�I��rendering����
                //doHeldItemRenderLayer(entity,swordType,model);
                return;
            }

            if(ItemSlashBlade.hasScabbardInOffhand(entity)){
                return;
            }


            boolean isEnchanted = swordType.contains(ItemSlashBlade.SwordType.Enchanted);


            int charge;
            if(entity instanceof EntityPlayer && !entity.getActiveItemStack().isEmpty() )
                charge = entity.getItemInUseMaxCount();
            else
                charge = 0;

            boolean doProjectileBarrier = ProjectileBarrier.isAvailable(entity, stack, entity.getItemInUseCount());

            Vec3d adjust = s.getAdjust();

            boolean isBroken = swordType.contains(ItemSlashBlade.SwordType.Broken);
            ItemSlashBlade.ComboSequence combo = ItemSlashBlade.ComboSequence.None;
            int color = 0x3333FF;
            if(stack.hasTag()){
                CompoundNBT tag = stack.getTag();

                combo = ItemSlashBlade.getComboSequence(tag);

                if(doAdjust){
                    adjust = adjust.mul(0.1,-0.1,-0.1);
                }

                if (ItemSlashBlade.SummonedSwordColor.exists(tag)) {
                    color = ItemSlashBlade.SummonedSwordColor.get(tag);
                    if(color < 0)
                        color = -color;
                }
            }

            WavefrontObject offhandModel = null;
            ResourceLocationRaw offHandResourceTexture = null;
            boolean offhandIsBroken = false;
            int offhandColor = 0x3333FF;
            if(!offhand.isEmpty() && (offhand.getItem() instanceof ItemSlashBlade)){

                if(enabledOffhandRendering)
                    renderBack(offhand,entity,true, combo.mainHandCombo != null);

                ItemSlashBlade offhandItemBlade = ((ItemSlashBlade) offhand.getItem());
                offhandModel = BladeModelManager.getInstance().getModel(offhandItemBlade.getModelLocation(offhand));
                offHandResourceTexture = offhandItemBlade.getModelTexture(offhand);

                EnumSet<ItemSlashBlade.SwordType> offHandSwordType = offhandItemBlade.getSwordType(offhand);
                offhandIsBroken = offHandSwordType.contains(ItemSlashBlade.SwordType.Broken);

                if (offhand.hasTag()) {
                    CompoundNBT tag = offhand.getTag();
                    if (ItemSlashBlade.SummonedSwordColor.exists(tag)) {
                        offhandColor = ItemSlashBlade.SummonedSwordColor.get(tag);
                        if (offhandColor < 0)
                            offhandColor = -offhandColor;
                    }
                }
                this.bindTexture(s.getTexture());
            }





            float progress = entity.getSwingProgress(partialTicks);

            if((!combo.equals(ItemSlashBlade.ComboSequence.None)) && entity.swingProgress == 0.0f)
                progress = 1.0f;

            progress *= 1.2;
            if(1.0f < progress)
                progress = 1.0f;

            //progress = (entity.ticksExisted % 10) / 10.0f;

            switch(combo){
                case ComboSequence.SIai:
                case ComboSequence.Iai:
                    progress = 1.0f - (Math.abs(progress-0.5f) * 2.0f);

                    break;

                case ComboSequence.HiraTuki:
                case ComboSequence.Stinger:
                    progress = 1.0f;

                    break;

                default :
                    progress = 1.0f - progress;
                    progress = 1.0f - (float)Math.pow(progress,2.0);

                    break;
            }

        /*
		if(!isBroken && isEnchanted && ItemSlashBlade.RequiredChargeTick < charge){
			progress = 0.0f;
			combo = ComboSequence.None;
		}
        */




            String renderTarget;

            GL11.glPushMatrix();
            GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);
            {
                GlStateManager.shadeModel(GL11.GL_SMOOTH);
                GL11.glEnable(GL11.GL_BLEND);

                OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);

                GL11.glColor3f(1.0F, 1.0F, 1.0F);

                //�̊i�␳ config���
                GlStateManager.translatef(ax,ay,az);

                //���ʒu��
                GlStateManager.translatef(0.25f,0.4f,-0.5f);


                {
                    //�S�̃X�P�[���␳
                    float scalef = (float)(0.075f);
                    GlStateManager.scalef(scalef, scalef, scalef);
                }

                //�������
                GlStateManager.rotatef(60.0f, 1, 0, 0);

                //����O��
                GlStateManager.rotatef(-20.0f, 0, 0, 1);

                //�n�����Ɍ�����i��������
                GlStateManager.rotatef(90.0f, 0, 1.0f, 0);


                float xoffset = 10.0f;
                float yoffset = 8.0f;

                //-----------------------------------------------------------------------------------------------------------------------
                GL11.glPushMatrix();


                boolean doOffhandRender = false;
                int handsLoop = 1;
                if(combo.mainHandCombo != null){
                    handsLoop = 2;
                    if(!offhand.isEmpty() && offhand.getItem() instanceof ItemSlashBlade)
                        doOffhandRender = true;
                }

                float handsLoopProgressTmp = progress;
                ItemSlashBlade.ComboSequence comboSequenceTmp = combo;

                boolean tmpIsBroken = isBroken;
                ResourceLocationRaw tmpResourceTexture = resourceTexture;
                WavefrontObject tmpModel = model;
                int tmpColor = color;
                ItemStack tmpStack = stack;

                for(int handsLoopIdx = 0; handsLoopIdx < handsLoop; handsLoopIdx++) {
                    GL11.glPushMatrix();


                    if (doOffhandRender && handsLoopIdx == 0) {
                        isBroken = offhandIsBroken;
                        resourceTexture = offHandResourceTexture != null ? offHandResourceTexture : tmpResourceTexture;
                        model = offhandModel != null ? offhandModel : tmpModel;
                        color = offhandColor;
                        stack = offhand;

                    }
                    else if (handsLoopIdx == 1) {
                        combo = comboSequenceTmp.mainHandCombo;
                        progress = 1.0f;

                        isBroken = tmpIsBroken;
                        resourceTexture = tmpResourceTexture;
                        model = tmpModel;
                        color = tmpColor;
                        stack = tmpStack;
                    }

                    float progressTmp = progress;
                    for (int blurLoop = 0; blurLoop < 3; blurLoop++) {
                        GL11.glPushMatrix();
                        if ((progressTmp == 1.0f || combo.useScabbard) && blurLoop != 0) {
                            GL11.glPopMatrix();
                            break;
                        }

                        if (0 < blurLoop) {
                            progress *= 0.8f;
                        }

                        if (!combo.equals(ItemSlashBlade.ComboSequence.None)) {
                            float tmp = progress;

                            if (combo.swingAmplitude < 0) {
                                progress = 1.0f - progress;
                            }
                            //GlStateManager.rotatef(-90, 0.0f, 1.0f, 0.0f);

                            if (combo.equals(ItemSlashBlade.ComboSequence.Stinger)
                                    || combo.equals(ItemSlashBlade.ComboSequence.HiraTuki)) {
                                GlStateManager.translatef(0.0f, 0.0f, -26.0f);
                            }

                            if (combo.equals(ItemSlashBlade.ComboSequence.Kiriorosi)) {


                                GlStateManager.rotatef(20.0f, -1.0f, 0, 0);
                                GlStateManager.rotatef(-30.0f, 0, 0, -1.0f);


                                GlStateManager.translatef(0.0f, 0.0f, -8.0f);
                                //GlStateManager.rotatef(-30.0f,1,0,0);


                                GlStateManager.rotatef((90 - combo.swingDirection), 0.0f, -1.0f, 0.0f);

                                GlStateManager.rotatef((1.0f - progress) * -90.0f, 0.0f, 0.0f, -1.0f);
                                GlStateManager.translatef(0.0f, (1.0f - progress) * -5.0f, 0.0f);
                                GlStateManager.translatef((1.0f - progress) * 10.0f, 0.0f, 0.0f);

                                GlStateManager.translatef(-xoffset, 0.0f, 0.0f);
                                GlStateManager.translatef(0.0f, -yoffset, 0.0f);

                                progress = 1.0f;

                                if (0 < combo.swingAmplitude) {
                                    GlStateManager.rotatef(progress * (combo.swingAmplitude), 0.0f, 0.0f, -1.0f);
                                } else {
                                    GlStateManager.rotatef(progress * (-combo.swingAmplitude), 0.0f, 0.0f, -1.0f);
                                }

                                GlStateManager.translatef(0.0f, yoffset, 0.0f);
                                GlStateManager.translatef(xoffset, 0.0f, 0.0f);
                                GlStateManager.rotatef(180.0f, 0, 1, 0);
                            } else if (combo.swingDirection < 0) {


                                GlStateManager.rotatef(20.0f, -1.0f, 0, 0);
                                GlStateManager.rotatef(-30.0f, 0, 0, -1.0f);


                                GlStateManager.translatef(0.0f, 0.0f, -12.0f);
                                //GlStateManager.rotatef(-30.0f,1,0,0);


                                GlStateManager.rotatef((90 + combo.swingDirection), 0.0f, -1.0f, 0.0f);


                                GlStateManager.rotatef((1.0f - progress) * -(180.0f + 60.0f), 0.0f, 0.0f, -1.0f);
                        /*
                        GlStateManager.translatef(0.0f, (1.0f-progress) * -5.0f, 0.0f);
                        GlStateManager.translatef((1.0f-progress) * 10.0f, 0.0f, 0.0f);
                        */

                                GlStateManager.translatef(-xoffset, 0.0f, 0.0f);
                                GlStateManager.translatef(0.0f, -yoffset, 0.0f);

                                float rotatef = progress * Math.abs(combo.swingAmplitude);
                                GlStateManager.rotatef(rotatef, 0.0f, 0.0f, -1.0f);

                                GlStateManager.translatef(0.0f, yoffset, 0.0f);
                                GlStateManager.translatef(xoffset, 0.0f, 0.0f);
                                //GlStateManager.rotatef(180.0f, 0, 1, 0);
                            } else {

                                GlStateManager.rotatef(progress * 20.0f, -1.0f, 0, 0);
                                GlStateManager.rotatef(progress * -30.0f, 0, 0, -1.0f);


                                GlStateManager.rotatef(progress * (90 - combo.swingDirection), 0.0f, -1.0f, 0.0f);


                                GlStateManager.translatef(-xoffset, 0.0f, 0.0f);


                                GlStateManager.translatef(0.0f, -yoffset, 0.0f);

                                if (0 < combo.swingAmplitude) {
                                    GlStateManager.rotatef(progress * (combo.swingAmplitude), 0.0f, 0.0f, -1.0f);
                                } else {
                                    GlStateManager.rotatef(progress * (-combo.swingAmplitude), 0.0f, 0.0f, -1.0f);
                                }

                                GlStateManager.translatef(0.0f, yoffset, 0.0f);
                                GlStateManager.translatef(xoffset, 0.0f, 0.0f);
                            }


                            progress = tmp;
                        } else {
                            if (doProjectileBarrier) {

                                GlStateManager.rotatef(90.0f, 0, -1, 0);
                                GlStateManager.rotatef(-20.0f, 0, 0, -1);
                                GlStateManager.rotatef(40.0f, -1, 0, 0);
                                //GlStateManager.rotatef(60.0f, -1, 0, 0);

                                if (entity.isSneaking())
                                    GlStateManager.rotatef(30.0f, -1, 0, 0);

                                GlStateManager.translatef(-7.0f, 0.0f, -4.0f);

                                final int span = 7;
                                float rotParTicks = 360.0f / (float) span;
                                rotParTicks *= (entity.ticksExisted % span) + partialTicks;
                                GlStateManager.rotatef(rotParTicks, 0, 0, -1);

                                GlStateManager.translatef(0.0f, -3.0f, 0.0f);

                                progress = 0.5f;
                            }
                        }


                        if (isBroken)
                            renderTarget = "blade_damaged";
                        else
                            renderTarget = "blade";


                        float scalefLocal = 0.095f;
                        GlStateManager.scalef(scalefLocal, scalefLocal, scalefLocal);
                        GlStateManager.rotatef(-90.0f, 0, 0, 1);
                        this.render.bindTexture(resourceTexture);

                        GlStateManager.texParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
                        GlStateManager.texParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
                        GL11.glAlphaFunc(GL11.GL_GEQUAL, 0.005f);

                        if (0 < blurLoop) {
                            Face.setColor(new Color(1.0f, 1.0f, 1.0f, (float) Math.pow(0.5, blurLoop)).getRGB());
                        }

                        model.renderPart(renderTarget);

                        if (!combo.useScabbard) {
                            model.renderPart(renderTarget + "_unsheathe");
                        }

                        if (0 < blurLoop) {
                            Face.resetColor();
                        }


                        GlStateManager.disableLighting();
                        GL11.glEnable(GL11.GL_BLEND);
                        OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

                        try(LightSetup ls = LightSetup.setup()) {

                            model.renderPart(renderTarget + "_luminous");
                            if (!combo.useScabbard) {
                                model.renderPart(renderTarget + "_unsheathe_luminous");
                            }

                            /**/
                            if (!combo.useScabbard
                                    && (combo != ItemSlashBlade.ComboSequence.Noutou)
                                    && (combo != ItemSlashBlade.ComboSequence.HiraTuki)
                                    && (combo != ItemSlashBlade.ComboSequence.Stinger)
                                    || doProjectileBarrier) {
                                GlStateManager.pushMatrix();
                                GlStateManager.depthMask(false);
                                this.render.bindTexture(textureLocation);
                                double alpha = Math.sin(progress * Math.PI);
                                if (doProjectileBarrier)
                                    GlStateManager.scaled(1, 0.8, 1);
                                else if (isBroken)
                                    GlStateManager.scaled(0.4, 0.5, 1);
                                else
                                    GlStateManager.scaled(1, alpha * 2.0, 1);

                                GlStateManager.rotatef((float) (10.0 * (1.0 - alpha)), 0, 0, 1);

                                OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

                                GlStateManager.blendEquation(GL14.GL_FUNC_REVERSE_SUBTRACT);

                                float transparent = 1.0f;
                                if (0 < blurLoop)
                                    transparent = (float) Math.pow(0.5, blurLoop);

                                Face.setColor((0xFFFFFF - color) | (0xFF000000 & ((int) (0x44 * alpha * transparent) << 24)));
                                trailModel.renderAll();

                                GlStateManager.blendEquation(GL14.GL_FUNC_ADD);

                                Face.setColor((color) | (0xFF000000 & ((int) (0x66 * alpha * transparent) << 24)));
                                trailModel.renderAll();

                                Face.resetColor();

                                GlStateManager.depthMask(true);

                                this.render.bindTexture(resourceTexture);
                                GlStateManager.popMatrix();
                            }
                            /**/

                        }

                        GlStateManager.enableLighting();
                        OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);

                        ringStates.renderRing();

                        if (stack.hasEffect()) {
                            GL11.glDepthFunc(GL11.GL_EQUAL);
                            GlStateManager.disableLighting();
                            this.render.bindTexture(RES_ITEM_GLINT);
                            GL11.glEnable(GL11.GL_BLEND);
                            OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_COLOR, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

                            Face.setColor(0xFF8040CC);

                            GL11.glMatrixMode(GL11.GL_TEXTURE);
                            GL11.glPushMatrix();
                            float f8 = 0.125F;
                            GlStateManager.scalef(f8, f8, f8);
                            float f9 = (float) (Util.milliTime() % 3000L) / 3000.0F * 8.0F;
                            GlStateManager.translatef(f9, 0.0F, 0.0F);
                            GlStateManager.rotatef(-50.0F, 0.0F, 0.0F, 1.0F);
                            model.renderPart(renderTarget);
                            GL11.glPopMatrix();
                            GL11.glPushMatrix();
                            GlStateManager.scalef(f8, f8, f8);
                            f9 = (float) (Util.milliTime() % 4873L) / 4873.0F * 8.0F;
                            GlStateManager.translatef(-f9, 0.0F, 0.0F);
                            GlStateManager.rotatef(10.0F, 0.0F, 0.0F, 1.0F);
                            model.renderPart(renderTarget);
                            GL11.glPopMatrix();
                            GL11.glMatrixMode(GL11.GL_MODELVIEW);

                            Face.resetColor();

                            OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);
                            GlStateManager.enableLighting();
                            GL11.glDepthFunc(GL11.GL_LEQUAL);
                        }

                        GL11.glPopMatrix();
                    }
                    progress = progressTmp;
                    GL11.glPopMatrix();
                }
                GL11.glPopMatrix();
                //restore
                {
                    progress = handsLoopProgressTmp;
                    combo = comboSequenceTmp;
                    isBroken = tmpIsBroken;
                    resourceTexture = tmpResourceTexture;
                    model = tmpModel;
                    color = tmpColor;
                    stack = tmpStack;
                }
                //-----------------------------------------------------------------------------------------------------------------------

                GL11.glPushMatrix();{


                if((!combo.equals(ItemSlashBlade.ComboSequence.None)) && combo.useScabbard){


                    if(combo.swingAmplitude < 0){
                        progress = 1.0f - progress;
                    }

                    GlStateManager.rotatef(progress * 20.0f, -1.0f, 0, 0);
                    GlStateManager.rotatef(progress * -30.0f, 0, 0, -1.0f);


                    GlStateManager.rotatef(progress * (90 - combo.swingDirection), 0.0f, -1.0f, 0.0f);


                    GlStateManager.translatef(-xoffset , 0.0f, 0.0f );


                    GlStateManager.translatef(0.0f, -yoffset, 0.0f);

                    if(0 < combo.swingAmplitude){
                        GlStateManager.rotatef(progress * (combo.swingAmplitude), 0.0f, 0.0f, -1.0f);
                    }else{
                        GlStateManager.rotatef(progress * (-combo.swingAmplitude), 0.0f, 0.0f, -1.0f);
                    }

                    GlStateManager.translatef(0.0f, yoffset, 0.0f);
                    GlStateManager.translatef(xoffset , 0.0f, 0.0f );

                }


                GL11.glPushMatrix();

                float scalefLocal = 0.095f;
                GlStateManager.scalef(scalefLocal, scalefLocal, scalefLocal);
                GlStateManager.rotatef(-90.0f, 0, 0, 1);
                this.render.bindTexture(resourceTexture);

                GlStateManager.texParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
                GlStateManager.texParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
                GL11.glAlphaFunc(GL11.GL_GEQUAL, 0.05f);

                renderTarget = "sheath";
                model.renderPart(renderTarget);

                GlStateManager.disableLighting();
                GL11.glEnable(GL11.GL_BLEND);
                OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

                try(LightSetup ls = LightSetup.setup()){
                    model.renderPart(renderTarget + "_luminous");
                }

                GlStateManager.enableLighting();
                OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);

                if (stack.hasEffect())
                {

                    GL11.glDepthFunc(GL11.GL_EQUAL);
                    GlStateManager.disableLighting();
                    render.bindTexture(RES_ITEM_GLINT);
                    GL11.glEnable(GL11.GL_BLEND);
                    OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_COLOR, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

                    Face.setColor(0xFF8040CC);

                    GL11.glMatrixMode(GL11.GL_TEXTURE);
                    GL11.glPushMatrix();
                    float f8 = 0.125F;
                    GlStateManager.scalef(f8, f8, f8);
                    float f9 = (float)(Util.milliTime() % 3000L) / 3000.0F * 8.0F;
                    GlStateManager.translatef(f9, 0.0F, 0.0F);
                    GlStateManager.rotatef(-50.0F, 0.0F, 0.0F, 1.0F);
                    model.renderPart(renderTarget);
                    GL11.glPopMatrix();
                    GL11.glPushMatrix();
                    GlStateManager.scalef(f8, f8, f8);
                    f9 = (float)(Util.milliTime() % 4873L) / 4873.0F * 8.0F;
                    GlStateManager.translatef(-f9, 0.0F, 0.0F);
                    GlStateManager.rotatef(10.0F, 0.0F, 0.0F, 1.0F);
                    model.renderPart(renderTarget);
                    GL11.glPopMatrix();
                    GL11.glMatrixMode(GL11.GL_MODELVIEW);

                    Face.resetColor();

                    OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);
                    GlStateManager.enableLighting();
                    GL11.glDepthFunc(GL11.GL_LEQUAL);
                }

                GL11.glPopMatrix();

                if(!isBroken && isEnchanted && (ItemSlashBlade.RequiredChargeTick < charge || combo.isCharged)){
                    GL11.glPushMatrix();

                    GL11.glPushMatrix();

                    GL11.glEnable(GL11.GL_BLEND);
                    float f4 = 3.0F;
                    GL11.glColor4f(f4, f4, f4, 3.0F);
                    GlStateManager.disableLighting();
                    OpenGlHelper.glBlendFuncSeparate(GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);


                    GL11.glPushMatrix();
                    GlStateManager.scalef(scalefLocal, scalefLocal, scalefLocal);
                    GlStateManager.rotatef(-90.0f, 0, 0, 1);
                    model.renderPart("sheath");

                    GL11.glPopMatrix();

                    GlStateManager.enableLighting();
                    GL11.glDisable(GL11.GL_BLEND);
                    GL11.glPopMatrix();

                    float ff1 = (float)entity.ticksExisted + partialTicks;
                    render.bindTexture(armoredCreeperTextures);
                    GL11.glMatrixMode(GL11.GL_TEXTURE);
                    GL11.glLoadIdentity();
                    float f2 = ff1 * 0.03F;
                    float f3 = ff1 * 0.02F;
                    GlStateManager.translatef(f2, -f3, 0.0F);
                    GL11.glMatrixMode(GL11.GL_MODELVIEW);
                    GL11.glEnable(GL11.GL_BLEND);
                    f4 = 1.0F;
                    GL11.glColor4f(f4, f4, f4, 1.0F);
                    GlStateManager.disableLighting();
                    OpenGlHelper.glBlendFuncSeparate(GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

                    //GlStateManager.translatef(-1f, 0.0f, -0.5f);

                    GL11.glPushMatrix();
                    GlStateManager.scalef(scalefLocal,scalefLocal,scalefLocal);
                    GlStateManager.rotatef(-90.0f,0,0,1);
                    model.renderPart("effect");

                    GL11.glPopMatrix();

                    GL11.glMatrixMode(GL11.GL_TEXTURE);
                    GL11.glLoadIdentity();
                    GL11.glMatrixMode(GL11.GL_MODELVIEW);
                    GlStateManager.enableLighting();
                    GL11.glColor4f(1, 1, 1, 1.0F);
                    OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);


                    GL11.glPopMatrix();
                }
            }GL11.glPopMatrix();

                //-----------------------------------------------------------------------------------------------------------------------
                GlStateManager.shadeModel(GL11.GL_FLAT);
            }
            GL11.glPopAttrib();
            GL11.glPopMatrix();
        });
    }
/*
    public void doHeldItemRenderLayer(LivingEntity LivingEntityIn, EnumSet<ItemSlashBlade.SwordType> types, WavefrontObject model)
    {
        if(!(render.getMainModel() instanceof ModelBiped))
            return;

        ItemStack itemstack = LivingEntityIn.getHeldItem(EnumHand.MAIN_HAND);

        if (!itemstack.isEmpty())
        {
            GlStateManager.pushMatrix();

            if (render.getMainModel().isChild)
            {
                float f = 0.5F;
                GlStateManager.translatef(0.0F, 0.625F, 0.0F);
                GlStateManager.rotatef(-20.0F, -1.0F, 0.0F, 0.0F);
                GlStateManager.scalef(f, f, f);
            }


            ((ModelBiped)render.getMainModel()).postRenderArm(0.0625F, LivingEntityIn.getPrimaryHand());
            GlStateManager.translatef(-0.0625F, 0.4375F, 0.0625F);


            Item item = itemstack.getItem();
            Minecraft minecraft = Minecraft.getInstance();

            if (LivingEntityIn.isSneaking())
            {
                GlStateManager.translatef(0.0F, 0.203125F, 0.0F);
            }

            {
                ResourceLocationRaw resourceTexture = ItemSlashBlade.getModelTexture(itemstack);
                this.render.bindTexture(resourceTexture);

                GlStateManager.texParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
                GlStateManager.texParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
                GL11.glAlphaFunc(GL11.GL_GEQUAL, 0.05f);

                GlStateManager.translatef(0.0f, 0.15f, 0.0f);
                float scalef = 0.008f;
                GlStateManager.scalef(scalef,scalef,scalef);
                GlStateManager.rotatef(-90, 0, 1, 0);

                String renderTargets[];
                if(types.contains(ItemSlashBlade.SwordType.NoScabbard)){

                    if(types.contains(ItemSlashBlade.SwordType.Broken)){
                        renderTargets = new String[]{"blade_damaged"};
                    }else{
                        renderTargets = new String[]{"blade"};
                    }
                }else{
                    renderTargets = new String[]{"sheath", "blade"};
                }

                model.renderOnly(renderTargets);

                GlStateManager.disableLighting();
                GL11.glEnable(GL11.GL_BLEND);

                OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ONE, GL11.GL_ZERO);

                float lastx = OpenGlHelper.lastBrightnessX;
                float lasty = OpenGlHelper.lastBrightnessY;
                OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, 240f, 240f);

                for(String renderTarget : renderTargets)
                    model.renderPart(renderTarget + "_luminous");

                OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, lastx, lasty);

                GlStateManager.enableLighting();
                OpenGlHelper.glBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);
            }

            GlStateManager.popMatrix();
        }
    }
    */
}
